---
import Header from '../components/Header.astro';
import Sidebar from '../components/Sidebar.astro';
import CodeInterpreter from '../components/CodeInterpreter.astro';
import { getUser, getUserProfile } from '../lib/supabase';

const { title } = Astro.props;

const user = await getUser();
let profile = null;
if (user) {
  profile = await getUserProfile(user.id);
}
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>{title}</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
    <style>
      body {
        font-family: 'Roboto', sans-serif;
        background-color: #f4f6f8;
      }
      .resizer {
        width: 6px;
        height: 100%;
        background-color: #e0e0e0;
        cursor: col-resize;
        transition: background-color 0.3s;
      }
      .resizer:hover {
        background-color: #bdbdbd;
      }
      .main-content {
        background-color: #ffffff;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      }
      .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0,0,0,0.4);
      }
      .modal-content {
        background-color: #fefefe;
        margin: 15% auto;
        padding: 20px;
        border: 1px solid #888;
        width: 80%;
        max-width: 500px;
        border-radius: 8px;
      }
      .tab {
        cursor: pointer;
        padding: 10px 20px;
        margin: 0 2px;
        background-color: #f1f1f1;
        border: none;
        border-radius: 5px 5px 0 0;
      }
      .tab.active {
        background-color: #fff;
        border-bottom: 2px solid #4a90e2;
      }
      .tab-content {
        display: none;
        padding: 20px;
        border-top: none;
      }
      .tab.disabled {
        opacity: 0.5;
        cursor: not-allowed;
      }
    </style>
  </head>
  <body class="flex flex-col min-h-screen bg-gray-100">
    <Header user={user} />
    <div class="flex flex-1 overflow-hidden">
      <Sidebar />
      <main class="flex-1 p-6 overflow-auto">
        <div id="course-content" class="main-content p-8">
          <slot />
        </div>
      </main>
      <div id="resizer" class="resizer"></div>
      <div id="code-interpreter-container" class="bg-gray-800 text-white" style="width: 300px; min-width: 200px; max-width: 50%;">
        <CodeInterpreter />
      </div>
    </div>

    <!-- Settings Modal -->
    <div id="settingsModal" class="modal">
      <div class="modal-content">
        <h2 class="text-2xl font-bold mb-4">Settings</h2>
        <div class="tab-container">
          <button class="tab active" onclick="openTab(event, 'generalSettings')">General</button>
          <button class="tab" onclick="openTab(event, 'profileSettings')" id="profileTab" style="display: none;">Profile</button>
        </div>
        <div id="generalSettings" class="tab-content" style="display: block;">
          <div class="mb-4">
            <label for="storeId" class="block text-sm font-medium text-gray-700">Store ID</label>
            <input type="text" id="storeId" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
          </div>
          <div class="mb-4">
            <label for="publicKey" class="block text-sm font-medium text-gray-700">Public Key</label>
            <input type="text" id="publicKey" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
          </div>
        </div>
        <div id="profileSettings" class="tab-content">
          <form id="profileForm" class="space-y-4">
            <div>
              <label for="email" class="block text-sm font-medium text-gray-700">Email</label>
              <input type="email" id="email" name="email" value={user?.email} required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
            </div>
            <div>
              <label for="first_name" class="block text-sm font-medium text-gray-700">First Name</label>
              <input type="text" id="first_name" name="first_name" value={profile?.first_name} required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
            </div>
            <div>
              <label for="last_name" class="block text-sm font-medium text-gray-700">Last Name</label>
              <input type="text" id="last_name" name="last_name" value={profile?.last_name} required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
            </div>
            <div>
              <label for="password" class="block text-sm font-medium text-gray-700">New Password (leave blank to keep current)</label>
              <input type="password" id="password" name="password" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
            </div>
          </form>
        </div>
        <button id="saveSettingsBtn" class="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2">Save</button>
        <button id="closeSettingsBtn" class="ml-2 bg-gray-200 text-gray-700 px-4 py-2 rounded-md hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2">Close</button>
      </div>
    </div>

    <script>
      const resizer = document.getElementById('resizer');
      const codeInterpreterContainer = document.getElementById('code-interpreter-container');
      const settingsModal = document.getElementById('settingsModal');
      const saveSettingsBtn = document.getElementById('saveSettingsBtn');
      const closeSettingsBtn = document.getElementById('closeSettingsBtn');
      const storeIdInput = document.getElementById('storeId');
      const publicKeyInput = document.getElementById('publicKey');
      const courseContent = document.getElementById('course-content');
      const profileForm = document.getElementById('profileForm');
      const profileTab = document.getElementById('profileTab');

      let isResizing = false;
      let lastDownX = 0;

      resizer.addEventListener('mousedown', (e) => {
        isResizing = true;
        lastDownX = e.clientX;
      });

      document.addEventListener('mousemove', (e) => {
        if (!isResizing) return;

        const offsetRight = document.body.offsetWidth - (e.clientX - document.body.offsetLeft);
        const minWidth = 200;
        const maxWidth = document.body.offsetWidth * 0.5;

        if (offsetRight > minWidth && offsetRight < maxWidth) {
          codeInterpreterContainer.style.width = `${offsetRight}px`;
        }
      });

      document.addEventListener('mouseup', () => {
        isResizing = false;
      });

      document.addEventListener('openSettingsModal', () => {
        settingsModal.style.display = 'block';
      });

      closeSettingsBtn.addEventListener('click', () => {
        settingsModal.style.display = 'none';
      });

      saveSettingsBtn.addEventListener('click', () => {
        const storeId = storeIdInput.value;
        const publicKey = publicKeyInput.value;
        
        // Get profile form data
        const formData = new FormData(profileForm);
        const profileData = Object.fromEntries(formData.entries());

        // Dispatch custom event with settings and profile data
        document.dispatchEvent(new CustomEvent('saveSettings', {
          detail: { storeId, publicKey, profileData }
        }));

        settingsModal.style.display = 'none';
      });

      // Close modal when clicking outside
      window.addEventListener('click', (e) => {
        if (e.target === settingsModal) {
          settingsModal.style.display = 'none';
        }
      });

      // Listen for sectionChange event
      document.addEventListener('sectionChange', (e) => {
        if (e.detail === 'courses') {
          resetMainContent();
        }
      });

      function resetMainContent() {
        courseContent.innerHTML = `
          <h1 class="text-3xl font-bold mb-6 text-gray-800">Welcome to Swell Surge</h1>
          <p class="text-lg text-gray-600 mb-8">Select a course or daily quest from the sidebar to start your learning journey!</p>
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            <div class="bg-white p-6 rounded-lg shadow-md">
              <h2 class="text-xl font-semibold mb-4 text-indigo-600">Featured Courses</h2>
              <ul class="space-y-2">
                <li class="text-gray-700">Introduction to Programming</li>
                <li class="text-gray-700">Web Development Fundamentals</li>
                <li class="text-gray-700">Data Science Essentials</li>
              </ul>
            </div>
            <div class="bg-white p-6 rounded-lg shadow-md">
              <h2 class="text-xl font-semibold mb-4 text-green-600">Daily Quests</h2>
              <ul class="space-y-2">
                <li class="text-gray-700">Solve a Coding Challenge</li>
                <li class="text-gray-700">Learn a New Concept</li>
                <li class="text-gray-700">Practice Problem-Solving</li>
              </ul>
            </div>
            <div class="bg-white p-6 rounded-lg shadow-md">
              <h2 class="text-xl font-semibold mb-4 text-orange-600">Learning Resources</h2>
              <ul class="space-y-2">
                <li class="text-gray-700">Video Tutorials</li>
                <li class="text-gray-700">Interactive Exercises</li>
                <li class="text-gray-700">Community Forums</li>
              </ul>
            </div>
          </div>
        `;
      }

      // Make supabase available globally
      import { supabase } from '../lib/supabase';
      window.supabase = supabase;

      // Move openTab function outside of the script tag to make it globally accessible
      window.openTab = function(evt, tabName) {
        if (evt.currentTarget.classList.contains('disabled')) {
          return;
        }
        var i, tabContent, tabLinks;
        tabContent = document.getElementsByClassName("tab-content");
        for (i = 0; i < tabContent.length; i++) {
          tabContent[i].style.display = "none";
        }
        tabLinks = document.getElementsByClassName("tab");
        for (i = 0; i < tabLinks.length; i++) {
          tabLinks[i].className = tabLinks[i].className.replace(" active", "");
        }
        document.getElementById(tabName).style.display = "block";
        evt.currentTarget.className += " active";
      }

      // Function to update UI based on login status
      function updateUIForLoginStatus(isLoggedIn) {
        if (isLoggedIn) {
          profileTab.style.display = 'inline-block';
        } else {
          profileTab.style.display = 'none';
          // If the profile tab was active, switch to general settings
          if (profileTab.classList.contains('active')) {
            openTab({ currentTarget: document.querySelector('.tab[onclick="openTab(event, \'generalSettings\')"]') }, 'generalSettings');
          }
        }
      }

      // Check login status on page load
      supabase.auth.onAuthStateChange((event, session) => {
        updateUIForLoginStatus(!!session);
      });

      // Initial check
      updateUIForLoginStatus(!!supabase.auth.session());
    </script>
  </body>
</html>
